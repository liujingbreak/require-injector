"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = void 0;
const tslib_1 = require("tslib");
const replace_require_1 = tslib_1.__importDefault(require("./replace-require"));
const loader = function (content, sourcemap) {
    var callback = this.async();
    if (!callback)
        throw new Error('require-injector only supports async loader');
    try {
        const { content: newContent } = load(content, this);
        callback(null, newContent);
    }
    catch (ex) {
        callback(ex);
    }
};
exports.default = loader;
function load(content, loader) {
    var rj = loader.query.injector || new replace_require_1.default({ noNode: true });
    var file = loader.resourcePath;
    let inputAst;
    if (loader.query.astCache != null) {
        inputAst = loader.query.astCache(loader.resourcePath);
    }
    const { replaced, patches, ast } = rj.injectToFileWithPatchInfo(file, content, inputAst || undefined);
    if (loader.query.onAstCreated != null) {
        loader.query.onAstCreated(file, ast);
    }
    return {
        content: replaced,
        ast,
        patches
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2VicGFjay1sb2FkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi90cy93ZWJwYWNrLWxvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsZ0ZBQXlDO0FBaUJ6QyxNQUFNLE1BQU0sR0FBcUIsVUFBeUMsT0FBTyxFQUFFLFNBQVM7SUFDMUYsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzVCLElBQUksQ0FBQyxRQUFRO1FBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0lBQ2pFLElBQUk7UUFDRixNQUFNLEVBQUMsT0FBTyxFQUFFLFVBQVUsRUFBQyxHQUFHLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbEQsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztLQUM1QjtJQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ1gsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2Q7QUFDSCxDQUFDLENBQUM7QUFFZ0IseUJBQU87QUFFekIsU0FBUyxJQUFJLENBQUMsT0FBd0IsRUFBRSxNQUFnQztJQUN0RSxJQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxJQUFJLHlCQUFRLENBQUMsRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQztJQUMvRCxJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDO0lBQy9CLElBQUksUUFBNEQsQ0FBQztJQUNqRSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtRQUNqQyxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBQ3ZEO0lBRUQsTUFBTSxFQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxPQUFpQixFQUFFLFFBQVEsSUFBSSxTQUFTLENBQUMsQ0FBQztJQUM5RyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtRQUNyQyxNQUFNLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7S0FDdEM7SUFDRCxPQUFPO1FBQ0wsT0FBTyxFQUFFLFFBQVE7UUFDakIsR0FBRztRQUNILE9BQU87S0FDUixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHdwIGZyb20gJ3dlYnBhY2snO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBJbmplY3RvciBmcm9tICcuL3JlcGxhY2UtcmVxdWlyZSc7XG5pbXBvcnQgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbnR5cGUgTG9hZGVyQ29udGV4dCA9IHdwLmxvYWRlci5Mb2FkZXJDb250ZXh0O1xuXG5pbnRlcmZhY2UgTG9hZGVyQ29udGV4dFdpdGhPcHRpb25zIGV4dGVuZHMgTG9hZGVyQ29udGV4dCB7XG4gIHF1ZXJ5OiBMb2FkZXJPcHRpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRlck9wdGlvbnMge1xuICBpbmplY3RvcjogSW5qZWN0b3I7XG4gIC8qKiBjYWNoZSBzaG91bGQgcmV0dXJuIGNvbXBpbGVkIEFTVDpzb3VyY2VGaWxlICovXG4gIGFzdENhY2hlPyhyZXNvdXJjZTogc3RyaW5nKTogdHMuU291cmNlRmlsZSB8IHVuZGVmaW5lZCB8IG51bGw7XG4gIC8qKiBJZiB5b3UgZG9uJ3QgcHJvdmlkZSBhc3RDYWNoZSwgYSBuZXcgQVNUIGlzIGNyZWF0ZWQgYW5kIGNhbiBiZSByZXR1cm5lZCBieSB0aGlzIGNhbGwgYmFjayAqL1xuICBvbkFzdENyZWF0ZWQ/KHJlc291cmNlOiBzdHJpbmcsIGFzdDogdHMuU291cmNlRmlsZSk6IHZvaWQ7XG59XG5cbmNvbnN0IGxvYWRlcjogd3AubG9hZGVyLkxvYWRlciA9IGZ1bmN0aW9uKHRoaXM6IExvYWRlckNvbnRleHRXaXRoT3B0aW9ucywgY29udGVudCwgc291cmNlbWFwKSB7XG4gIHZhciBjYWxsYmFjayA9IHRoaXMuYXN5bmMoKTtcbiAgaWYgKCFjYWxsYmFjaylcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JlcXVpcmUtaW5qZWN0b3Igb25seSBzdXBwb3J0cyBhc3luYyBsb2FkZXInKTtcbiAgdHJ5IHtcbiAgICBjb25zdCB7Y29udGVudDogbmV3Q29udGVudH0gPSBsb2FkKGNvbnRlbnQsIHRoaXMpO1xuICAgIGNhbGxiYWNrKG51bGwsIG5ld0NvbnRlbnQpO1xuICB9IGNhdGNoIChleCkge1xuICAgIGNhbGxiYWNrKGV4KTtcbiAgfVxufTtcblxuZXhwb3J0IHtsb2FkZXIgYXMgZGVmYXVsdH07XG5cbmZ1bmN0aW9uIGxvYWQoY29udGVudDogc3RyaW5nIHwgQnVmZmVyLCBsb2FkZXI6IExvYWRlckNvbnRleHRXaXRoT3B0aW9ucykge1xuICB2YXIgcmogPSBsb2FkZXIucXVlcnkuaW5qZWN0b3IgfHwgbmV3IEluamVjdG9yKHtub05vZGU6IHRydWV9KTtcbiAgdmFyIGZpbGUgPSBsb2FkZXIucmVzb3VyY2VQYXRoO1xuICBsZXQgaW5wdXRBc3Q6IFJldHVyblR5cGU8Tm9uTnVsbGFibGU8TG9hZGVyT3B0aW9uc1snYXN0Q2FjaGUnXT4+O1xuICBpZiAobG9hZGVyLnF1ZXJ5LmFzdENhY2hlICE9IG51bGwpIHtcbiAgICBpbnB1dEFzdCA9IGxvYWRlci5xdWVyeS5hc3RDYWNoZShsb2FkZXIucmVzb3VyY2VQYXRoKTtcbiAgfVxuXG4gIGNvbnN0IHtyZXBsYWNlZCwgcGF0Y2hlcywgYXN0fSA9IHJqLmluamVjdFRvRmlsZVdpdGhQYXRjaEluZm8oZmlsZSwgY29udGVudCBhcyBzdHJpbmcsIGlucHV0QXN0IHx8IHVuZGVmaW5lZCk7XG4gIGlmIChsb2FkZXIucXVlcnkub25Bc3RDcmVhdGVkICE9IG51bGwpIHtcbiAgICBsb2FkZXIucXVlcnkub25Bc3RDcmVhdGVkKGZpbGUsIGFzdCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBjb250ZW50OiByZXBsYWNlZCxcbiAgICBhc3QsXG4gICAgcGF0Y2hlc1xuICB9O1xufVxuIl19