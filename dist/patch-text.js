"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._replaceSorted = exports._sortAndRemoveOverlap = exports.Replacement = void 0;
const tslib_1 = require("tslib");
const assert = tslib_1.__importStar(require("assert"));
const util = require("util");
class Replacement {
    constructor(start, end, text) {
        this.start = start;
        this.end = end;
        this.text = text;
        assert.notEqual(text, null, 'replacement text should not be null or undefined');
    }
}
exports.Replacement = Replacement;
function _sortAndRemoveOverlap(replacements, removeOverlap = true, text) {
    replacements.sort(function (a, b) {
        return a.start - b.start;
    });
    if (replacements.length < 2)
        return;
    for (let i = 1, l = replacements.length; i < l;) {
        if (replacements[i].start < replacements[i - 1].end) {
            let prev = replacements[i - 1];
            let curr = replacements[i];
            if (removeOverlap) {
                replacements.splice(i, 1);
                l--;
            }
            else {
                throw new Error(`Overlap replacements: 
				"${text.slice(curr.start, curr.end)}" ${util.inspect(curr)}
				and "${text.slice(prev.start, prev.end)}" ${util.inspect(prev)}`);
            }
        }
        else
            i++;
    }
}
exports._sortAndRemoveOverlap = _sortAndRemoveOverlap;
function _replaceSorted(text, replacements) {
    var offset = 0;
    return replacements.reduce((text, update) => {
        var start = update.start + offset;
        var end = update.end + offset;
        var replacement = update.text == null ? update.replacement : update.text;
        offset += (replacement.length - (end - start));
        return text.slice(0, start) + replacement + text.slice(end);
    }, text);
}
exports._replaceSorted = _replaceSorted;
function replaceCode(text, replacements, removeOverlap = false) {
    _sortAndRemoveOverlap(replacements, removeOverlap, text);
    return _replaceSorted(text, replacements);
}
exports.default = replaceCode;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF0Y2gtdGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3RzL3BhdGNoLXRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHVEQUFpQztBQUNqQyw2QkFBOEI7QUFpQjlCLE1BQWEsV0FBVztJQUN2QixZQUFtQixLQUFhLEVBQVMsR0FBVyxFQUM1QyxJQUFZO1FBREQsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUFTLFFBQUcsR0FBSCxHQUFHLENBQVE7UUFDNUMsU0FBSSxHQUFKLElBQUksQ0FBUTtRQUNuQixNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsa0RBQWtELENBQUMsQ0FBQztJQUNqRixDQUFDO0NBQ0Q7QUFMRCxrQ0FLQztBQUVELFNBQWdCLHFCQUFxQixDQUFDLFlBQThCLEVBQUUsYUFBYSxHQUFHLElBQUksRUFBRSxJQUFZO0lBQ3ZHLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBUyxDQUFDLEVBQUUsQ0FBQztRQUM5QixPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FBQztJQUVILElBQUksWUFBWSxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQzFCLE9BQU87SUFDUixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHO1FBQ2hELElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUNwRCxJQUFJLElBQUksR0FBRyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQy9CLElBQUksSUFBSSxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMzQixJQUFJLGFBQWEsRUFBRTtnQkFDbEIsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzFCLENBQUMsRUFBRSxDQUFDO2FBQ0o7aUJBQU07Z0JBQ04sTUFBTSxJQUFJLEtBQUssQ0FBQztPQUNiLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7V0FDbkQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNsRTtTQUNEOztZQUNBLENBQUMsRUFBRSxDQUFDO0tBQ0w7QUFDRixDQUFDO0FBdEJELHNEQXNCQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxJQUFZLEVBQUUsWUFBOEI7SUFDMUUsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBWSxFQUFFLE1BQXNCLEVBQUUsRUFBRTtRQUNuRSxJQUFJLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUNsQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQztRQUM5QixJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN6RSxNQUFNLElBQUksQ0FBQyxXQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDaEQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxXQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5RCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDVixDQUFDO0FBVEQsd0NBU0M7QUFFRCxTQUF3QixXQUFXLENBQUMsSUFBWSxFQUFFLFlBQThCLEVBQUUsYUFBYSxHQUFHLEtBQUs7SUFDdEcscUJBQXFCLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxPQUFPLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUhELDhCQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgdXRpbCA9IHJlcXVpcmUoJ3V0aWwnKTtcblxuLyoqXG4gKiBAcGFyYW0gIHtbdHlwZV19IHRleHRcbiAqIEBwYXJhbSAge29iamVjdH0gcmVwbGFjZW1lbnRzXG4gKiBAcGFyYW0gIHtudW1iZXJ9IHJlcGxhY2VtZW50cy5zdGFydFxuICogQHBhcmFtICB7bnVtYmVyfSByZXBsYWNlbWVudHMuZW5kXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHJlcGxhY2VtZW50cy5yZXBsYWNlbWVudFxuICogQHJldHVybiB7c3RyaW5nfSAgICAgICAgICAgXHRyZXBsYWNlZCB0ZXh0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVwbGFjZW1lbnRJbmYge1xuXHRzdGFydDogbnVtYmVyO1xuXHRlbmQ6IG51bWJlcjtcblx0dGV4dD86IHN0cmluZztcblx0cmVwbGFjZW1lbnQ/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBSZXBsYWNlbWVudCBpbXBsZW1lbnRzIFJlcGxhY2VtZW50SW5mIHtcblx0Y29uc3RydWN0b3IocHVibGljIHN0YXJ0OiBudW1iZXIsIHB1YmxpYyBlbmQ6IG51bWJlcixcblx0XHRwdWJsaWMgdGV4dDogc3RyaW5nKSB7XG5cdFx0YXNzZXJ0Lm5vdEVxdWFsKHRleHQsIG51bGwsICdyZXBsYWNlbWVudCB0ZXh0IHNob3VsZCBub3QgYmUgbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX3NvcnRBbmRSZW1vdmVPdmVybGFwKHJlcGxhY2VtZW50czogUmVwbGFjZW1lbnRJbmZbXSwgcmVtb3ZlT3ZlcmxhcCA9IHRydWUsIHRleHQ6IHN0cmluZykge1xuXHRyZXBsYWNlbWVudHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0cmV0dXJuIGEuc3RhcnQgLSBiLnN0YXJ0O1xuXHR9KTtcblxuXHRpZiAocmVwbGFjZW1lbnRzLmxlbmd0aCA8IDIpXG5cdFx0cmV0dXJuO1xuXHRmb3IgKGxldCBpID0gMSwgbCA9IHJlcGxhY2VtZW50cy5sZW5ndGg7IGkgPCBsOykge1xuXHRcdGlmIChyZXBsYWNlbWVudHNbaV0uc3RhcnQgPCByZXBsYWNlbWVudHNbaSAtIDFdLmVuZCkge1xuXHRcdFx0bGV0IHByZXYgPSByZXBsYWNlbWVudHNbaSAtIDFdO1xuXHRcdFx0bGV0IGN1cnIgPSByZXBsYWNlbWVudHNbaV07XG5cdFx0XHRpZiAocmVtb3ZlT3ZlcmxhcCkge1xuXHRcdFx0XHRyZXBsYWNlbWVudHMuc3BsaWNlKGksIDEpO1xuXHRcdFx0XHRsLS07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE92ZXJsYXAgcmVwbGFjZW1lbnRzOiBcblx0XHRcdFx0XCIke3RleHQuc2xpY2UoY3Vyci5zdGFydCwgY3Vyci5lbmQpfVwiICR7dXRpbC5pbnNwZWN0KGN1cnIpfVxuXHRcdFx0XHRhbmQgXCIke3RleHQuc2xpY2UocHJldi5zdGFydCwgcHJldi5lbmQpfVwiICR7dXRpbC5pbnNwZWN0KHByZXYpfWApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZVxuXHRcdFx0aSsrO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfcmVwbGFjZVNvcnRlZCh0ZXh0OiBzdHJpbmcsIHJlcGxhY2VtZW50czogUmVwbGFjZW1lbnRJbmZbXSkge1xuXHR2YXIgb2Zmc2V0ID0gMDtcblx0cmV0dXJuIHJlcGxhY2VtZW50cy5yZWR1Y2UoKHRleHQ6IHN0cmluZywgdXBkYXRlOiBSZXBsYWNlbWVudEluZikgPT4ge1xuXHRcdHZhciBzdGFydCA9IHVwZGF0ZS5zdGFydCArIG9mZnNldDtcblx0XHR2YXIgZW5kID0gdXBkYXRlLmVuZCArIG9mZnNldDtcblx0XHR2YXIgcmVwbGFjZW1lbnQgPSB1cGRhdGUudGV4dCA9PSBudWxsID8gdXBkYXRlLnJlcGxhY2VtZW50IDogdXBkYXRlLnRleHQ7XG5cdFx0b2Zmc2V0ICs9IChyZXBsYWNlbWVudCEubGVuZ3RoIC0gKGVuZCAtIHN0YXJ0KSk7XG5cdFx0cmV0dXJuIHRleHQuc2xpY2UoMCwgc3RhcnQpICsgcmVwbGFjZW1lbnQhICsgdGV4dC5zbGljZShlbmQpO1xuXHR9LCB0ZXh0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVwbGFjZUNvZGUodGV4dDogc3RyaW5nLCByZXBsYWNlbWVudHM6IFJlcGxhY2VtZW50SW5mW10sIHJlbW92ZU92ZXJsYXAgPSBmYWxzZSkge1xuXHRfc29ydEFuZFJlbW92ZU92ZXJsYXAocmVwbGFjZW1lbnRzLCByZW1vdmVPdmVybGFwLCB0ZXh0KTtcblx0cmV0dXJuIF9yZXBsYWNlU29ydGVkKHRleHQsIHJlcGxhY2VtZW50cyk7XG59XG4iXX0=